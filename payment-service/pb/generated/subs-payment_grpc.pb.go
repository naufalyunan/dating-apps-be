// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: subs-payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubPayment_CreateUserSubcription_FullMethodName = "/sub_payment.SubPayment/CreateUserSubcription"
	SubPayment_GetUserSubcriptions_FullMethodName   = "/sub_payment.SubPayment/GetUserSubcriptions"
	SubPayment_CompletePayment_FullMethodName       = "/sub_payment.SubPayment/CompletePayment"
	SubPayment_GetPaymentByID_FullMethodName        = "/sub_payment.SubPayment/GetPaymentByID"
)

// SubPaymentClient is the client API for SubPayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubPaymentClient interface {
	CreateUserSubcription(ctx context.Context, in *CreateUserSubcriptionReq, opts ...grpc.CallOption) (*CreateUserSubcriptionResp, error)
	GetUserSubcriptions(ctx context.Context, in *GetUserSubcriptionsReq, opts ...grpc.CallOption) (*GetUserSubcriptionsResp, error)
	CompletePayment(ctx context.Context, in *CompletePaymentReq, opts ...grpc.CallOption) (*CompletePaymentResp, error)
	GetPaymentByID(ctx context.Context, in *GetPaymentByIDReq, opts ...grpc.CallOption) (*GetPaymentByIDResp, error)
}

type subPaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewSubPaymentClient(cc grpc.ClientConnInterface) SubPaymentClient {
	return &subPaymentClient{cc}
}

func (c *subPaymentClient) CreateUserSubcription(ctx context.Context, in *CreateUserSubcriptionReq, opts ...grpc.CallOption) (*CreateUserSubcriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserSubcriptionResp)
	err := c.cc.Invoke(ctx, SubPayment_CreateUserSubcription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subPaymentClient) GetUserSubcriptions(ctx context.Context, in *GetUserSubcriptionsReq, opts ...grpc.CallOption) (*GetUserSubcriptionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSubcriptionsResp)
	err := c.cc.Invoke(ctx, SubPayment_GetUserSubcriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subPaymentClient) CompletePayment(ctx context.Context, in *CompletePaymentReq, opts ...grpc.CallOption) (*CompletePaymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletePaymentResp)
	err := c.cc.Invoke(ctx, SubPayment_CompletePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subPaymentClient) GetPaymentByID(ctx context.Context, in *GetPaymentByIDReq, opts ...grpc.CallOption) (*GetPaymentByIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentByIDResp)
	err := c.cc.Invoke(ctx, SubPayment_GetPaymentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubPaymentServer is the server API for SubPayment service.
// All implementations must embed UnimplementedSubPaymentServer
// for forward compatibility.
type SubPaymentServer interface {
	CreateUserSubcription(context.Context, *CreateUserSubcriptionReq) (*CreateUserSubcriptionResp, error)
	GetUserSubcriptions(context.Context, *GetUserSubcriptionsReq) (*GetUserSubcriptionsResp, error)
	CompletePayment(context.Context, *CompletePaymentReq) (*CompletePaymentResp, error)
	GetPaymentByID(context.Context, *GetPaymentByIDReq) (*GetPaymentByIDResp, error)
	mustEmbedUnimplementedSubPaymentServer()
}

// UnimplementedSubPaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubPaymentServer struct{}

func (UnimplementedSubPaymentServer) CreateUserSubcription(context.Context, *CreateUserSubcriptionReq) (*CreateUserSubcriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSubcription not implemented")
}
func (UnimplementedSubPaymentServer) GetUserSubcriptions(context.Context, *GetUserSubcriptionsReq) (*GetUserSubcriptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubcriptions not implemented")
}
func (UnimplementedSubPaymentServer) CompletePayment(context.Context, *CompletePaymentReq) (*CompletePaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePayment not implemented")
}
func (UnimplementedSubPaymentServer) GetPaymentByID(context.Context, *GetPaymentByIDReq) (*GetPaymentByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentByID not implemented")
}
func (UnimplementedSubPaymentServer) mustEmbedUnimplementedSubPaymentServer() {}
func (UnimplementedSubPaymentServer) testEmbeddedByValue()                    {}

// UnsafeSubPaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubPaymentServer will
// result in compilation errors.
type UnsafeSubPaymentServer interface {
	mustEmbedUnimplementedSubPaymentServer()
}

func RegisterSubPaymentServer(s grpc.ServiceRegistrar, srv SubPaymentServer) {
	// If the following call pancis, it indicates UnimplementedSubPaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubPayment_ServiceDesc, srv)
}

func _SubPayment_CreateUserSubcription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSubcriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubPaymentServer).CreateUserSubcription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubPayment_CreateUserSubcription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubPaymentServer).CreateUserSubcription(ctx, req.(*CreateUserSubcriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubPayment_GetUserSubcriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubcriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubPaymentServer).GetUserSubcriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubPayment_GetUserSubcriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubPaymentServer).GetUserSubcriptions(ctx, req.(*GetUserSubcriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubPayment_CompletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubPaymentServer).CompletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubPayment_CompletePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubPaymentServer).CompletePayment(ctx, req.(*CompletePaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubPayment_GetPaymentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubPaymentServer).GetPaymentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubPayment_GetPaymentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubPaymentServer).GetPaymentByID(ctx, req.(*GetPaymentByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubPayment_ServiceDesc is the grpc.ServiceDesc for SubPayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubPayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_payment.SubPayment",
	HandlerType: (*SubPaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserSubcription",
			Handler:    _SubPayment_CreateUserSubcription_Handler,
		},
		{
			MethodName: "GetUserSubcriptions",
			Handler:    _SubPayment_GetUserSubcriptions_Handler,
		},
		{
			MethodName: "CompletePayment",
			Handler:    _SubPayment_CompletePayment_Handler,
		},
		{
			MethodName: "GetPaymentByID",
			Handler:    _SubPayment_GetPaymentByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subs-payment.proto",
}
