// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: match.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchService_CheckMatch_FullMethodName    = "/match.MatchService/CheckMatch"
	MatchService_GetMatches_FullMethodName    = "/match.MatchService/GetMatches"
	MatchService_StreamMatches_FullMethodName = "/match.MatchService/StreamMatches"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Match service definition
type MatchServiceClient interface {
	// Check if two users have a match
	CheckMatch(ctx context.Context, in *CheckMatchRequest, opts ...grpc.CallOption) (*CheckMatchResponse, error)
	// Get all matches for a user
	GetMatches(ctx context.Context, in *GetMatchesRequest, opts ...grpc.CallOption) (*GetMatchesResponse, error)
	// Stream matches in real-time for a user
	StreamMatches(ctx context.Context, in *StreamMatchesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMatchesResponse], error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) CheckMatch(ctx context.Context, in *CheckMatchRequest, opts ...grpc.CallOption) (*CheckMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_CheckMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) GetMatches(ctx context.Context, in *GetMatchesRequest, opts ...grpc.CallOption) (*GetMatchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchesResponse)
	err := c.cc.Invoke(ctx, MatchService_GetMatches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) StreamMatches(ctx context.Context, in *StreamMatchesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMatchesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatchService_ServiceDesc.Streams[0], MatchService_StreamMatches_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMatchesRequest, StreamMatchesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchService_StreamMatchesClient = grpc.ServerStreamingClient[StreamMatchesResponse]

// MatchServiceServer is the server API for MatchService service.
// All implementations must embed UnimplementedMatchServiceServer
// for forward compatibility.
//
// The Match service definition
type MatchServiceServer interface {
	// Check if two users have a match
	CheckMatch(context.Context, *CheckMatchRequest) (*CheckMatchResponse, error)
	// Get all matches for a user
	GetMatches(context.Context, *GetMatchesRequest) (*GetMatchesResponse, error)
	// Stream matches in real-time for a user
	StreamMatches(*StreamMatchesRequest, grpc.ServerStreamingServer[StreamMatchesResponse]) error
	mustEmbedUnimplementedMatchServiceServer()
}

// UnimplementedMatchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchServiceServer struct{}

func (UnimplementedMatchServiceServer) CheckMatch(context.Context, *CheckMatchRequest) (*CheckMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMatch not implemented")
}
func (UnimplementedMatchServiceServer) GetMatches(context.Context, *GetMatchesRequest) (*GetMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (UnimplementedMatchServiceServer) StreamMatches(*StreamMatchesRequest, grpc.ServerStreamingServer[StreamMatchesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatches not implemented")
}
func (UnimplementedMatchServiceServer) mustEmbedUnimplementedMatchServiceServer() {}
func (UnimplementedMatchServiceServer) testEmbeddedByValue()                      {}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_CheckMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CheckMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CheckMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CheckMatch(ctx, req.(*CheckMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_GetMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetMatches(ctx, req.(*GetMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_StreamMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchServiceServer).StreamMatches(m, &grpc.GenericServerStream[StreamMatchesRequest, StreamMatchesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchService_StreamMatchesServer = grpc.ServerStreamingServer[StreamMatchesResponse]

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "match.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMatch",
			Handler:    _MatchService_CheckMatch_Handler,
		},
		{
			MethodName: "GetMatches",
			Handler:    _MatchService_GetMatches_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatches",
			Handler:       _MatchService_StreamMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "match.proto",
}
