// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: swipe.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwipeService_RecordSwipe_FullMethodName     = "/swipe.SwipeService/RecordSwipe"
	SwipeService_GetSuggestions_FullMethodName  = "/swipe.SwipeService/GetSuggestions"
	SwipeService_GetSwipeHistory_FullMethodName = "/swipe.SwipeService/GetSwipeHistory"
)

// SwipeServiceClient is the client API for SwipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Swipe service definition
type SwipeServiceClient interface {
	// Record a swipe action (like or pass)
	RecordSwipe(ctx context.Context, in *RecordSwipeRequest, opts ...grpc.CallOption) (*RecordSwipeResponse, error)
	// Get a list of suggested profiles for the user
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error)
	// Retrieve swipe history for a user
	GetSwipeHistory(ctx context.Context, in *GetSwipeHistoryRequest, opts ...grpc.CallOption) (*GetSwipeHistoryResponse, error)
}

type swipeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwipeServiceClient(cc grpc.ClientConnInterface) SwipeServiceClient {
	return &swipeServiceClient{cc}
}

func (c *swipeServiceClient) RecordSwipe(ctx context.Context, in *RecordSwipeRequest, opts ...grpc.CallOption) (*RecordSwipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordSwipeResponse)
	err := c.cc.Invoke(ctx, SwipeService_RecordSwipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swipeServiceClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSuggestionsResponse)
	err := c.cc.Invoke(ctx, SwipeService_GetSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swipeServiceClient) GetSwipeHistory(ctx context.Context, in *GetSwipeHistoryRequest, opts ...grpc.CallOption) (*GetSwipeHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwipeHistoryResponse)
	err := c.cc.Invoke(ctx, SwipeService_GetSwipeHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwipeServiceServer is the server API for SwipeService service.
// All implementations must embed UnimplementedSwipeServiceServer
// for forward compatibility.
//
// The Swipe service definition
type SwipeServiceServer interface {
	// Record a swipe action (like or pass)
	RecordSwipe(context.Context, *RecordSwipeRequest) (*RecordSwipeResponse, error)
	// Get a list of suggested profiles for the user
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error)
	// Retrieve swipe history for a user
	GetSwipeHistory(context.Context, *GetSwipeHistoryRequest) (*GetSwipeHistoryResponse, error)
	mustEmbedUnimplementedSwipeServiceServer()
}

// UnimplementedSwipeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwipeServiceServer struct{}

func (UnimplementedSwipeServiceServer) RecordSwipe(context.Context, *RecordSwipeRequest) (*RecordSwipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSwipe not implemented")
}
func (UnimplementedSwipeServiceServer) GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (UnimplementedSwipeServiceServer) GetSwipeHistory(context.Context, *GetSwipeHistoryRequest) (*GetSwipeHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwipeHistory not implemented")
}
func (UnimplementedSwipeServiceServer) mustEmbedUnimplementedSwipeServiceServer() {}
func (UnimplementedSwipeServiceServer) testEmbeddedByValue()                      {}

// UnsafeSwipeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwipeServiceServer will
// result in compilation errors.
type UnsafeSwipeServiceServer interface {
	mustEmbedUnimplementedSwipeServiceServer()
}

func RegisterSwipeServiceServer(s grpc.ServiceRegistrar, srv SwipeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwipeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwipeService_ServiceDesc, srv)
}

func _SwipeService_RecordSwipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSwipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwipeServiceServer).RecordSwipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwipeService_RecordSwipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwipeServiceServer).RecordSwipe(ctx, req.(*RecordSwipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwipeService_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwipeServiceServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwipeService_GetSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwipeServiceServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwipeService_GetSwipeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwipeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwipeServiceServer).GetSwipeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwipeService_GetSwipeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwipeServiceServer).GetSwipeHistory(ctx, req.(*GetSwipeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwipeService_ServiceDesc is the grpc.ServiceDesc for SwipeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwipeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swipe.SwipeService",
	HandlerType: (*SwipeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordSwipe",
			Handler:    _SwipeService_RecordSwipe_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _SwipeService_GetSuggestions_Handler,
		},
		{
			MethodName: "GetSwipeHistory",
			Handler:    _SwipeService_GetSwipeHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swipe.proto",
}
